const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  const generationConfig2 = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  
export const courseOutline = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate a study material for python for Exam and level of dicculty will be easy with summary of course,list of chapters along with summary for each chapter, Toplic list in each chapter. All result should be in Json format"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"course_title\": \"Introduction to Python Programming (Easy Level)\",\n  \"course_summary\": \"This course provides a beginner-friendly introduction to Python programming. It covers fundamental concepts like data types, control flow, functions, and basic data structures, equipping learners with the necessary skills to write simple Python programs and understand basic programming logic. This course is designed for individuals with little to no prior programming experience.\",\n    \"level\":\"Easy\",\n  \"chapters\": [\n    {\n      \"chapter_number\": 1,\n      \"chapter_title\": \"Getting Started with Python\",\n      \"chapter_summary\": \"This chapter introduces Python's basic environment setup and the fundamental building blocks of the language. It will cover the python installation, running a python script, printing output, comments and basic syntax.\",\n      \"topics\": [\n        \"Python Installation (on different OS)\",\n        \"Running Python scripts\",\n        \"Basic Syntax\",\n        \"Printing Output using `print()`\",\n         \"Comments in Python\"\n\n      ]\n    },\n    {\n      \"chapter_number\": 2,\n      \"chapter_title\": \"Variables and Data Types\",\n      \"chapter_summary\": \"This chapter focuses on understanding how to store and manipulate data in Python. It introduces the core data types, variable assignment, and basic arithmetic operations.\",\n      \"topics\": [\n        \"Variable Declaration and Assignment\",\n        \"Data Types: Integer (`int`), Float (`float`), String (`str`), Boolean (`bool`)\",\n         \"Type conversion\",\n        \"Basic Arithmetic Operations (+, -, *, /, %, **)\",\n         \"String Concatenation\"\n      ]\n    },\n    {\n      \"chapter_number\": 3,\n      \"chapter_title\": \"Control Flow: Making Decisions\",\n      \"chapter_summary\": \"This chapter explores conditional statements that allow programs to make decisions based on different conditions using `if`, `elif`, and `else` statements.\",\n      \"topics\": [\n        \"Conditional Statements: `if` statement\",\n        \"Conditional Statements: `if-else` statement\",\n         \"Conditional Statements: `if-elif-else` statement\",\n        \"Comparison Operators (==, !=, >, <, >=, <=)\",\n        \"Logical Operators (`and`, `or`, `not`)\"\n      ]\n    },\n      {\n          \"chapter_number\": 4,\n          \"chapter_title\": \"Control Flow: Loops\",\n          \"chapter_summary\": \"This chapter covers how to execute blocks of code repeatedly using `for` and `while` loops. It includes how to iterate through collections using loops.\",\n          \"topics\": [\n            \"The `for` loop\",\n            \"The `while` loop\",\n            \"Loop control using `break` and `continue`\",\n              \"Looping through a range of numbers `range()`\"\n          ]\n      },\n    {\n      \"chapter_number\": 5,\n      \"chapter_title\": \"Working with Strings\",\n      \"chapter_summary\": \"This chapter will dive deeper into string manipulation using various in-built functions and string formating.\",\n      \"topics\": [\n        \"String Indexing and Slicing\",\n        \"String Length using `len()`\",\n        \"String methods (`upper()`, `lower()`, `strip()`, `split()`, etc.)\",\n          \"String formatting using f-strings\"\n        ]\n    },\n     {\n      \"chapter_number\": 6,\n      \"chapter_title\": \"Introduction to Lists\",\n      \"chapter_summary\": \"This chapter introduces Python lists, a fundamental data structure for storing collections of items. It also provides list methods to perform operatios on lists.\",\n       \"topics\": [\n            \"List Creation and Accessing Elements\",\n            \"List Manipulation: Adding Elements (`append()`, `insert()`)\",\n            \"List Manipulation: Removing Elements (`remove()`, `pop()`)\",\n            \"List Slicing\",\n           \"List Length `len()`\"\n           ]\n    },\n       {\n      \"chapter_number\": 7,\n      \"chapter_title\": \"Introduction to Functions\",\n      \"chapter_summary\": \"This chapter introduces the concept of functions for organizing code into reusable blocks. It covers function definition, function calls, and parameters.\",\n           \"topics\": [\n             \"Defining Functions using `def`\",\n               \"Function Parameters and Arguments\",\n              \"Returning Values from Functions\",\n               \"Function scope and Local Variable\"\n        ]\n    }\n  ]\n}\n```\n"},
          ],
        },
      ],
    });

   export const generateNotesAiModel = model.startChat({
      generationConfig,
      history: [
        
        {
          role: "user",
          parts: [
            {text: "Generate exam material detail content for each chapter. Make sure to include all topic point in the  context, make sure to give conytext in html format(Do not add any HTML head,body,title tags)  \"chapter_title\": \"Object-Oriented Programming (OOP) Concepts\",\n\"chapter_summary\": \"This chapter revisits and expands upon core OOP concepts in Java, focusing on practical application and advanced techniques. It covers abstraction, encapsulation, inheritance, and polymorphism in detail.\",\n\"topics\": [\n\"Abstraction and Abstract Classes\",\n\"Encapsulation and Access Modifiers\",\n\"Inheritance: Single and Multilevel\",\n\"Method Overriding and super keyword\",\n\"Polymorphism: Compile-time and Run-time\",\n\"Interfaces and Implementation\"\n]\n},\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```html\n <div>\n    <h2>Object-Oriented Programming (OOP) Concepts</h2>\n    <p><strong>Chapter Summary:</strong> This chapter revisits and expands upon core OOP concepts in Java, focusing on practical application and advanced techniques. It covers abstraction, encapsulation, inheritance, and polymorphism in detail.</p>\n\n    <h3>Topics:</h3>\n\n    <div>\n        <h4>Abstraction and Abstract Classes</h4>\n        <p><strong>Context:</strong> Abstraction is the process of hiding complex implementation details and showing only the necessary information. In Java, abstract classes help achieve this by providing a blueprint for other classes, allowing for common functionality and enforcing certain structures while leaving room for variations in implementation.</p>\n        <ul>\n            <li><strong>Key Concepts:</strong>\n                <ul>\n                    <li>Understanding the purpose of abstraction in software design.</li>\n                    <li>Defining abstract classes using the <code>abstract</code> keyword.</li>\n                    <li>Defining abstract methods within abstract classes; methods without an implementation.</li>\n                    <li>Understanding that abstract classes cannot be instantiated directly.</li>\n                    <li>Understanding the role of abstract classes in defining a common interface.</li>\n                    <li>Recognizing scenarios where abstract classes are most appropriate.</li>\n                </ul>\n            </li>\n            <li><strong>Exam Material:</strong>\n                <ul>\n                    <li>Multiple-choice questions on valid and invalid abstract class declarations.</li>\n                    <li>Short-answer questions comparing abstract classes with concrete classes.</li>\n                    <li>Code analysis scenarios with abstract classes and methods; identify the missing pieces.</li>\n                    <li>Practical problems on using abstract classes to design common behaviours for different types of objects.</li>\n                    <li>Code correction: identify and fix issues in abstract class implementations.</li>\n                </ul>\n            </li>\n        </ul>\n    </div>\n\n    <div>\n        <h4>Encapsulation and Access Modifiers</h4>\n        <p><strong>Context:</strong> Encapsulation is about bundling data and methods that operate on that data within a single unit (a class). Access modifiers control visibility to protect the data from external misuse and allow for controlled access through designated methods (getters and setters). </p>\n         <ul>\n            <li><strong>Key Concepts:</strong>\n                <ul>\n                    <li>Understanding the goals of encapsulation in object-oriented design.</li>\n                    <li>Understanding the role of data hiding to protect data integrity.</li>\n                    <li>Using access modifiers: <code>public</code>, <code>private</code>, <code>protected</code>, and default (package-private).</li>\n                    <li>Understanding how each modifier controls visibility within classes, packages and subclasses.</li>\n                    <li>Properly encapsulating data using getter and setter methods.</li>\n                    <li>Knowing when to choose specific access modifiers based on different use cases.</li>\n                </ul>\n            </li>\n            <li><strong>Exam Material:</strong>\n                <ul>\n                    <li>Questions about the scope and accessibility of variables/methods using different access modifiers.</li>\n                    <li>Analyzing code snippets and identifying the effects of various access modifiers on compilation and execution.</li>\n                    <li>Code completion: using access modifiers to achieve correct encapsulation in given scenarios.</li>\n                    <li>Explain the scenarios where specific access modifiers will be the most suitable.</li>\n                    <li>Scenario based problem: choose the correct set of access modifiers according to given requirements.</li>\n                </ul>\n            </li>\n        </ul>\n    </div>\n\n    <div>\n        <h4>Inheritance: Single and Multilevel</h4>\n        <p><strong>Context:</strong> Inheritance allows a class (subclass or child class) to inherit properties and behaviors from another class (superclass or parent class). This supports code reuse and demonstrates an 'is-a' relationship. Single inheritance involves one direct parent, while multilevel inheritance involves a hierarchy of classes.</p>\n       <ul>\n            <li><strong>Key Concepts:</strong>\n                <ul>\n                    <li>Understanding the concept of inheritance for code reusability.</li>\n                    <li>Creating subclasses using the <code>extends</code> keyword.</li>\n                     <li>Understanding single-level inheritance: direct parent-child relation.</li>\n                    <li>Understanding multi-level inheritance: a chain of parent-child relations.</li>\n                    <li>Knowing how to achieve a class hierarchy using inheritance.</li>\n                    <li>Knowing the 'is-a' relationship and its correct application in inheritance.</li>\n                </ul>\n            </li>\n            <li><strong>Exam Material:</strong>\n                <ul>\n                   <li>Identifying parent and child classes in a given inheritance structure and class diagrams.</li>\n                    <li>Analysis of inheritance hierarchies to infer relations between classes.</li>\n                    <li>Code writing exercises on single and multi-level inheritance.</li>\n                    <li>Debugging: identify compile errors and runtime issues caused by incorrect inheritance.</li>\n                    <li>Code completion: write subclasses that inherit given characteristics from existing classes.</li>\n                </ul>\n            </li>\n        </ul>\n    </div>\n\n    <div>\n        <h4>Method Overriding and `super` keyword</h4>\n        <p><strong>Context:</strong> Method overriding allows a subclass to modify the implementation of a method inherited from its superclass, providing specific behavior while retaining the same signature. The <code>super</code> keyword facilitates accessing superclass members, including methods or constructors, from within subclasses.</p>\n        <ul>\n            <li><strong>Key Concepts:</strong>\n                <ul>\n                    <li>Understanding method overriding and its importance in polymorphism.</li>\n                    <li>Overriding methods by using the same signature in a subclass.</li>\n                    <li>The purpose and usage of the <code>@Override</code> annotation.</li>\n                    <li>Using the <code>super</code> keyword to access superclass' methods and constructors.</li>\n                     <li>Distinguishing method overloading from method overriding.</li>\n                     <li>Understanding when it is necessary to override a method.</li>\n                </ul>\n            </li>\n            <li><strong>Exam Material:</strong>\n                <ul>\n                   <li>Code examples implementing method overriding in subclass.</li>\n                   <li>Identify valid overriding scenarios and point out invalid ones.</li>\n                   <li>Code completion using the super keyword to invoke superclass methods or constructors.</li>\n                   <li>Multiple-choice differentiating between method overriding and method overloading.</li>\n                   <li>Error detection: identifying compile time or run time errors related to method overriding.</li>\n                </ul>\n            </li>\n        </ul>\n    </div>\n\n    <div>\n        <h4>Polymorphism: Compile-time and Run-time</h4>\n        <p><strong>Context:</strong> Polymorphism allows objects of different classes to be treated as objects of a common superclass.  Compile-time polymorphism (method overloading) is decided at compile time, whereas run-time polymorphism (method overriding) is decided at runtime via dynamic method dispatch.</p>\n        <ul>\n             <li><strong>Key Concepts:</strong>\n                <ul>\n                   <li>Understanding the broad concept of polymorphism.</li>\n                    <li>Compile-time polymorphism (method overloading).</li>\n                    <li>Run-time polymorphism (method overriding).</li>\n                    <li>How polymorphism supports more flexible and adaptable code.</li>\n                    <li>How dynamic method dispatch works at run-time.</li>\n                    <li>The importance of polymorphism in creating flexible and maintainable software.</li>\n                </ul>\n            </li>\n            <li><strong>Exam Material:</strong>\n                 <ul>\n                    <li>Comparing and contrasting compile-time and run-time polymorphism.</li>\n                    <li>Code analysis of polymorphic situations to identify which methods are invoked.</li>\n                    <li>Multiple-choice or short-answer questions testing understanding of various polymorphism types.</li>\n                    <li>Writing code where polymorphism is the solution to implement flexible code that handles different types of objects in a similar way.</li>\n                    <li>Scenarios that require students to choose between method overloading and method overriding in context.</li>\n                </ul>\n            </li>\n        </ul>\n    </div>\n\n    <div>\n        <h4>Interfaces and Implementation</h4>\n        <p><strong>Context:</strong> Interfaces in Java define contracts that classes must implement. They specify method signatures that implementing classes must provide. Interfaces support multiple inheritance of type (but not implementation), and encourage flexible designs by separating contracts from concrete implementations.</p>\n         <ul>\n            <li><strong>Key Concepts:</strong>\n                <ul>\n                    <li>Understanding the role of interfaces as contract for classes.</li>\n                     <li>Declaring interfaces using the <code>interface</code> keyword.</li>\n                     <li>Defining abstract methods within interfaces.</li>\n                     <li>Using the <code>implements</code> keyword to realize an interface in a class.</li>\n                     <li>Implementing multiple interfaces by a single class.</li>\n                     <li>Knowing differences between interfaces and abstract classes.</li>\n                     <li>Understanding when an interface would be more appropriate than an abstract class.</li>\n                </ul>\n            </li>\n             <li><strong>Exam Material:</strong>\n                <ul>\n                    <li>Questions on implementing classes that satisfy multiple interface.</li>\n                     <li>Coding to declare and implement interfaces.</li>\n                     <li>Questions that require differentiating between interfaces and abstract classes.</li>\n                     <li>Multiple choice questions on the validity of interface implementation.</li>\n                     <li>Code completion: implement a given interface in a class.</li>\n                </ul>\n            </li>\n        </ul>\n    </div>\n</div>\n```\n"},
          ],
        },
      ],
    });

    export const GenerateStudyTypeContentAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate the Flashcard on topic: Flutter fundamentals, User Interface(UI), Development, Basic App Navigation in JSON format with front back content, Maximum 15"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n[\n  {\n    \"front\": \"What is the core building block of a Flutter UI?\",\n    \"back\": \"Widgets. Everything in Flutter UI is a widget.\"\n  },\n  {\n    \"front\": \"What is the purpose of a `MaterialApp` widget?\",\n    \"back\": \"It sets up the app's structure with Material Design theming.\"\n  },\n    {\n    \"front\": \"Name two common layout widgets.\",\n    \"back\": \"`Row` and `Column` are used for arranging widgets horizontally and vertically respectively.\"\n  },\n  {\n    \"front\": \"What is the purpose of a `Scaffold` widget?\",\n     \"back\": \"Provides basic structure like an `AppBar`, `body`, and other material design elements\"\n   },\n  {\n    \"front\": \"How do you add text to your UI?\",\n    \"back\": \"Using the `Text` widget. e.g., `Text('Hello World!')`\"\n  },\n    {\n    \"front\": \"What's a `StatefulWidget`?\",\n    \"back\": \"A widget that can change its UI dynamically. It has mutable state.\"\n  },\n  {\n    \"front\": \"What's a `StatelessWidget`?\",\n    \"back\": \"A widget whose UI is fixed. Its state can't be changed once created.\"\n  },\n  {\n   \"front\": \"What method is used to rebuild the UI in a StatefulWidget?\",\n    \"back\": \"`setState(() {})` triggers a rebuild of the UI when state changes.\"\n   },\n  {\n    \"front\": \"What does `Navigator` class handle in Flutter?\",\n    \"back\": \"Handles navigation between different screens/routes.\"\n  },\n    {\n   \"front\": \"How do you navigate to a new route (screen)?\",\n     \"back\": \"Use `Navigator.push(context, MaterialPageRoute(builder: (context) => NewScreen()))`\"\n  },\n  {\n    \"front\": \"How do you return to the previous route/screen?\",\n    \"back\": \"Use `Navigator.pop(context)` to go back one step in navigation stack.\"\n  },\n  {\n    \"front\": \"What are 'named routes' in Flutter?\",\n      \"back\": \"A way to specify navigation paths by name, making it easier to manage complex flows\"\n  },\n    {\n   \"front\": \"What's the main purpose of a `builder` function in a `MaterialPageRoute`?\",\n     \"back\": \"It specifies which widget/screen to display on navigation.\"\n   },\n    {\n     \"front\":\"What is pubspec.yaml file used for?\",\n     \"back\":\"This file manages the project’s dependencies like packages and assets.\"\n    },\n    {\n      \"front\": \"Explain what a 'BuildContext' is?\",\n      \"back\": \"A handle to the location of a widget in the tree and provides access to the current theme, etc.\"\n    }\n]\n```\n"},
          ],
        },
      ],
    });


    export const GenerateQuizAiModel = model.startChat({
        generationConfig,
        history: [
          {
            role: "user",
            parts: [
              {text: "Generate Quiz on topic: Flutter Fundamentals, User Interface(UI) Development, Basic App navigation with Question along with the answers in JSON format"},
            ],
          },
          {
            role: "model",
            parts: [
              {text: "```json\n{\n  \"quizTitle\": \"Flutter Fundamentals: UI and Navigation\",\n  \"questions\": [\n    {\n      \"questionNumber\": 1,\n      \"question\": \"What is the primary programming language used for Flutter development?\",\n      \"options\": [\n        \"Java\",\n        \"Kotlin\",\n        \"Swift\",\n        \"Dart\"\n      ],\n      \"correctAnswer\": \"Dart\"\n    },\n    {\n      \"questionNumber\": 2,\n      \"question\": \"Which widget is the foundation for building the user interface in Flutter?\",\n      \"options\": [\n        \"View\",\n        \"Component\",\n        \"Widget\",\n         \"Element\"\n      ],\n      \"correctAnswer\": \"Widget\"\n    },\n    {\n      \"questionNumber\": 3,\n      \"question\": \"What does the 'build' method in a StatefulWidget do?\",\n      \"options\": [\n        \"It updates the state of the widget.\",\n        \"It constructs and returns the UI for the widget.\",\n         \"It handles user interactions.\",\n         \"It initializes the widget's data.\"\n      ],\n      \"correctAnswer\": \"It constructs and returns the UI for the widget.\"\n    },\n   {\n      \"questionNumber\": 4,\n      \"question\": \"Which layout widget positions its children in a single row or column?\",\n      \"options\": [\n        \"Stack\",\n        \"Container\",\n        \"Row/Column\",\n         \"Grid\"\n      ],\n      \"correctAnswer\": \"Row/Column\"\n    },\n   {\n      \"questionNumber\": 5,\n      \"question\": \"How do you handle user interaction events (e.g., button clicks) in Flutter?\",\n      \"options\": [\n         \"Using 'onClick' property\",\n        \"Using 'onPress' property\",\n        \"Using 'onTap' property with Gesture Detector\",\n        \"Using 'action' property\"\n\n      ],\n      \"correctAnswer\": \"Using 'onTap' property with Gesture Detector\"\n    },\n     {\n      \"questionNumber\": 6,\n      \"question\": \"Which widget is used for displaying images from a network URL?\",\n      \"options\": [\n         \"Icon\",\n        \"Image\",\n        \"NetworkImage\",\n          \"AssetImage\"\n      ],\n      \"correctAnswer\": \"NetworkImage\"\n    },\n    {\n      \"questionNumber\": 7,\n      \"question\": \"What is the purpose of 'setState()' in a StatefulWidget?\",\n      \"options\": [\n        \"To create a new widget.\",\n        \"To rebuild the widget with updated UI based on updated data.\",\n        \"To initialize the state.\",\n         \"To dispose of the widget.\"\n      ],\n       \"correctAnswer\": \"To rebuild the widget with updated UI based on updated data.\"\n\n    },\n    {\n     \"questionNumber\": 8,\n      \"question\": \"Which widget allows you to create padding around other widgets?\",\n      \"options\": [\n         \"Margin\",\n        \"Border\",\n        \"Padding\",\n         \"Container\"\n      ],\n      \"correctAnswer\": \"Padding\"\n    },\n    {\n      \"questionNumber\": 9,\n      \"question\": \"What is the purpose of the `Navigator` widget in Flutter?\",\n      \"options\": [\n        \"To manage widget layouts.\",\n         \"To handle user input.\",\n        \"To manage navigation between screens.\",\n        \"To perform background tasks.\"\n      ],\n       \"correctAnswer\": \"To manage navigation between screens.\"\n    },\n    {\n      \"questionNumber\": 10,\n      \"question\": \"Which method is typically used to navigate to a new screen using the `Navigator`?\",\n      \"options\": [\n         \"navigate()\",\n        \"push()\",\n        \"go()\",\n         \"open()\"\n      ],\n      \"correctAnswer\": \"push()\"\n    }\n  ]\n}\n```\n"},
            ],
          },
        ],
      });

const chatSession = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: "Generate Quiz on topic: Flutter Fundamentals, User Interface(UI) Development, Basic App navigation with Question along with the answers in JSON format"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"quizTitle\": \"Flutter Fundamentals: UI and Navigation\",\n  \"questions\": [\n    {\n      \"questionNumber\": 1,\n      \"question\": \"What is the primary programming language used for Flutter development?\",\n      \"options\": [\n        \"Java\",\n        \"Kotlin\",\n        \"Swift\",\n        \"Dart\"\n      ],\n      \"correctAnswer\": \"Dart\"\n    },\n    {\n      \"questionNumber\": 2,\n      \"question\": \"Which widget is the foundation for building the user interface in Flutter?\",\n      \"options\": [\n        \"View\",\n        \"Component\",\n        \"Widget\",\n         \"Element\"\n      ],\n      \"correctAnswer\": \"Widget\"\n    },\n    {\n      \"questionNumber\": 3,\n      \"question\": \"What does the 'build' method in a StatefulWidget do?\",\n      \"options\": [\n        \"It updates the state of the widget.\",\n        \"It constructs and returns the UI for the widget.\",\n         \"It handles user interactions.\",\n         \"It initializes the widget's data.\"\n      ],\n      \"correctAnswer\": \"It constructs and returns the UI for the widget.\"\n    },\n   {\n      \"questionNumber\": 4,\n      \"question\": \"Which layout widget positions its children in a single row or column?\",\n      \"options\": [\n        \"Stack\",\n        \"Container\",\n        \"Row/Column\",\n         \"Grid\"\n      ],\n      \"correctAnswer\": \"Row/Column\"\n    },\n   {\n      \"questionNumber\": 5,\n      \"question\": \"How do you handle user interaction events (e.g., button clicks) in Flutter?\",\n      \"options\": [\n         \"Using 'onClick' property\",\n        \"Using 'onPress' property\",\n        \"Using 'onTap' property with Gesture Detector\",\n        \"Using 'action' property\"\n\n      ],\n      \"correctAnswer\": \"Using 'onTap' property with Gesture Detector\"\n    },\n     {\n      \"questionNumber\": 6,\n      \"question\": \"Which widget is used for displaying images from a network URL?\",\n      \"options\": [\n         \"Icon\",\n        \"Image\",\n        \"NetworkImage\",\n          \"AssetImage\"\n      ],\n      \"correctAnswer\": \"NetworkImage\"\n    },\n    {\n      \"questionNumber\": 7,\n      \"question\": \"What is the purpose of 'setState()' in a StatefulWidget?\",\n      \"options\": [\n        \"To create a new widget.\",\n        \"To rebuild the widget with updated UI based on updated data.\",\n        \"To initialize the state.\",\n         \"To dispose of the widget.\"\n      ],\n       \"correctAnswer\": \"To rebuild the widget with updated UI based on updated data.\"\n\n    },\n    {\n     \"questionNumber\": 8,\n      \"question\": \"Which widget allows you to create padding around other widgets?\",\n      \"options\": [\n         \"Margin\",\n        \"Border\",\n        \"Padding\",\n         \"Container\"\n      ],\n      \"correctAnswer\": \"Padding\"\n    },\n    {\n      \"questionNumber\": 9,\n      \"question\": \"What is the purpose of the `Navigator` widget in Flutter?\",\n      \"options\": [\n        \"To manage widget layouts.\",\n         \"To handle user input.\",\n        \"To manage navigation between screens.\",\n        \"To perform background tasks.\"\n      ],\n       \"correctAnswer\": \"To manage navigation between screens.\"\n    },\n    {\n      \"questionNumber\": 10,\n      \"question\": \"Which method is typically used to navigate to a new screen using the `Navigator`?\",\n      \"options\": [\n         \"navigate()\",\n        \"push()\",\n        \"go()\",\n         \"open()\"\n      ],\n      \"correctAnswer\": \"push()\"\n    }\n  ]\n}\n```\n"},
        ],
      },
      {
        role: "user",
        parts: [
          {text: "Generate Question and answer on topic: Flutter Fundamentals, User Interface(UI) Development, Basic App navigation with Question along with the answers in JSON format"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"quizTitle\": \"Flutter Fundamentals: UI and Navigation - Q&A\",\n  \"questionsAndAnswers\": [\n    {\n      \"questionNumber\": 1,\n       \"question\": \"What is a 'widget' in the context of Flutter?\",\n      \"answer\": \"In Flutter, a widget is a fundamental building block of the user interface. Everything you see on a Flutter screen is a widget, whether it's a button, a text label, an image, or even a layout container. Widgets can be combined and nested to create complex UIs.\"\n    },\n    {\n      \"questionNumber\": 2,\n      \"question\": \"Explain the difference between StatelessWidget and StatefulWidget.\",\n      \"answer\": \"A `StatelessWidget` is a widget that does not have any mutable state. Once built, its UI remains static. A `StatefulWidget`, on the other hand, can change its UI dynamically based on changes in its internal state. It has an associated `State` object that manages this mutable data.\"\n    },\n    {\n       \"questionNumber\": 3,\n      \"question\": \"How do you arrange widgets in a row or column in Flutter?\",\n       \"answer\": \"You use `Row` and `Column` widgets for arranging widgets horizontally (row) or vertically (column), respectively. These widgets take a list of children widgets as input.\"\n    },\n    {\n      \"questionNumber\": 4,\n      \"question\": \"What is the purpose of the 'pubspec.yaml' file in a Flutter project?\",\n       \"answer\": \"The `pubspec.yaml` file is the configuration file for your Flutter project. It lists the dependencies (packages) your project uses, as well as other project settings like the application's name, version, and assets. It is where you manage external libraries used in your Flutter app.\"\n    },\n    {\n      \"questionNumber\": 5,\n       \"question\": \"How do you add padding to a widget in Flutter?\",\n      \"answer\": \"You can add padding to a widget using the `Padding` widget. The `Padding` widget takes a `padding` property, which is a `EdgeInsets` object, allowing you to specify padding values for all or specific sides (left, top, right, bottom).\"\n    },\n    {\n      \"questionNumber\": 6,\n       \"question\": \"Explain how to handle user input events, like a button tap, in Flutter.\",\n      \"answer\": \"User input events, like a button tap, are typically handled using a `GestureDetector` widget with an `onTap` property. The `GestureDetector` wraps the widget that should respond to the tap, and you provide a callback function to be executed when the tap occurs. For example, the `ElevatedButton` widget also handles taps.\"\n   },\n    {\n      \"questionNumber\": 7,\n      \"question\": \"What is the role of the `Navigator` widget in Flutter?\",\n       \"answer\": \"The `Navigator` widget in Flutter is responsible for managing navigation between different screens or routes in your application. It provides methods like `push()` and `pop()` to move between screens.\"\n   },\n    {\n      \"questionNumber\": 8,\n      \"question\": \"How do you navigate to a new screen in Flutter?\",\n      \"answer\": \"You typically use the `Navigator.push()` method to navigate to a new screen. You'll need to provide a `MaterialPageRoute` (or a custom route builder) which defines the new screen (widget) you want to navigate to.\"\n    },\n     {\n      \"questionNumber\": 9,\n      \"question\": \"How can you pass data between screens when navigating?\",\n       \"answer\":\"You can pass data between screens when navigating by passing data as arguments to the `push()` method. Then, in the new screen, you receive the arguments using `ModalRoute.of(context)?.settings.arguments`. You can pass any type of data, but for complex data, consider using a dedicated state management approach.\"\n    },\n    {\n      \"questionNumber\": 10,\n      \"question\":\"What is the purpose of the `setState()` method?\",\n      \"answer\": \"The `setState()` method is used to notify Flutter that the internal state of a `StatefulWidget` has changed and that the UI needs to be rebuilt based on the new data. It triggers the `build()` method of the widget, causing the UI to be updated accordingly.\"\n    }\n  ]\n}\n```\n"},
        ],
      },
    ],
  });

  
  
  
  
   // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());
  
  